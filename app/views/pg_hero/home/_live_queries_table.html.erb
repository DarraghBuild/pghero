<table class="table queries">
  <thead>
    <tr>
      <th style="width: 13%;">Pid</th>
      <th style="width: 19%;">Duration</th>
      <th style="width: 43%;">State</th>
      <th style="width: 25%;"></th>
    </tr>
  </thead>
  <tbody>
    <% queries.reverse.each do |query| %>
      <tr>
        <td><%= link_to query[:pid], live_queries_path(anchor: query[:pid]), id: query[:pid], style: "color: inherit;" %></td>
        <td><%= pghero_humanize_duration_ms(query[:duration_ms].round(2)) %></td>
        <td>
          <div><%= query[:state] %></div>
          <% if blocked_queries[query[:pid]] %>
            <% blocked_queries[query[:pid]].each do |q| %>
              <div class="text-warning">blocked by <%= link_to q[:blocking_pid], live_queries_path(anchor: q[:blocking_pid]), style: "color: inherit;" %></div>
            <% end %>
          <% end %>
          <% if progress = vacuum_progress[query[:pid]] %>
            <% phase = progress[:phase] %>
            <% index_vacuum_count = progress[:index_vacuum_count] %>
            <div>
              <strong><%= phase %><%= " (#{index_vacuum_count + 1})" if phase == "vacuuming indexes" || phase == "vacuuming heap" %></strong>
              <a href="https://www.postgresql.org/docs/12/progress-reporting.html#VACUUM-PROGRESS-REPORTING" target="_blank">(?)</a>
            </div>
            <% if phase == "scanning heap" || phase == "vacuuming indexes" %>
              <% heap_blks_scanned = progress[:heap_blks_scanned] %>
              <% heap_blks_total = progress[:heap_blks_total] %>
              <span class="text-muted"><%= heap_blks_scanned %> / <%= heap_blks_total %> (<%= ((heap_blks_scanned.to_f / heap_blks_total.to_f) * 100).round(2) %>%)</span>
              <br>
              <% num_dead_tuples = progress[:num_dead_tuples] %>
              <% max_dead_tuples = progress[:max_dead_tuples] %>
              <span class="text-muted"><%= num_dead_tuples %> / <%= max_dead_tuples %> (<%= ((num_dead_tuples.to_f / max_dead_tuples.to_f) * 100).round(2) %>%) dead tuples until next index vacuum ðŸ’€</span>
            <% elsif phase == "vacuuming heap" %>
              <% heap_blks_vacuumed = progress[:heap_blks_vacuumed] %>
              <% heap_blks_total = progress[:heap_blks_total] %>
              <span class="text-muted"><%= heap_blks_vacuumed %> / <%= heap_blks_total %> (<%= ((heap_blks_vacuumed.to_f / heap_blks_total.to_f) * 100).round(2) %>%) heap blocks ðŸ§±</span>
            <% end %>
          <% elsif progress = create_index_progress[query[:pid]] %>
            <div>
              <strong><%= progress[:phase] %></strong>
              <a href="https://www.postgresql.org/docs/12/progress-reporting.html#CREATE-INDEX-PROGRESS-REPORTING" target="_blank">(?)</a>
            </div>
            <% case progress[:phase] %>
            <% when "initializing",
                    "index validation: sorting tuples" %>
              <% # nothing interesting to show %>
            <% when "waiting for writers before build",
                    "waiting for writers before validation",
                    "waiting for old snapshots",
                    "waiting for readers before marking dead",
                    "waiting for readers before dropping" %>
              <span class="text-muted">
                obtained
                <%= progress[:lockers_done] %>
                /
                <%= progress[:lockers_total] %>
                locks,
                blocked by
                <%= link_to progress[:current_locker_pid], live_queries_path(anchor: progress[:current_locker_pid]), style: "color: inherit" %>
              </span>
            <% when "building index",
                    "building index: scanning table",
                    "index validation: scanning index",
                    "index validation: scanning table" %>
                <span class="text-muted">
                  <%= progress[:blocks_done] %>
                  /
                  <%= progress[:blocks_tota] %>
                  blocks
                </span>
                <% if progress[:tuples_total] %>
                  <br>
                  <span class="text-muted">
                    <%= progress[:tuples_done] %>
                    /
                    <%= progress[:tuples_tota] %>
                    tuples
                  </span>
                <% end %>
            <% end %>
          <% end %>
        </td>
        <td class="text-right" style="padding-right: 0">
          <% unless @database.filter_data %>
            <%= button_to "Explain", explain_path, params: {query: query[:query]}, form: {target: "_blank"}, class: "btn btn-info" %>
          <% end %>
          <%= button_to "Kill", kill_path(pid: query[:pid]), class: "btn btn-danger" %>
        </td>
      </tr>
      <tr>
        <td colspan="6" style="border-top: none; padding: 0;">
          <%= query[:source] %> <span class="text-muted"><%= query[:user] %></span>
          <% if held_locks[query[:pid]] %>
            <span class="text-muted" style="float: right"><a href="javascript: void(0);" onclick="document.getElementById('locks-<%= query[:pid] %>').style.display = 'block';" style="color: inherit">holding <%= held_locks[query[:pid]].length %> locks</a></span>
          <% end %>

          <pre style="margin-top: 1em;"><code><%= query[:query] %></code></pre>

          <% if held_locks[query[:pid]] %>
            <div id="locks-<%= query[:pid] %>" style="display: none">
              <table style="font-size: 12px">
                <thead>
                  <th>Target</th>
                  <th>Mode</th>
                  <th>Status</th>
                </thead>
                <% held_locks[query[:pid]].each do |lock| %>
                  <tr>
                    <td>
                      <%= lock[:relation] %>
                      <% if lock[:locktype] == "tuple" %>
                        <span class="text-muted">tuple: (<%= lock[:page] %>,<%= lock[:tuple] %>)</span>
                      <% elsif lock[:locktype] == "page" %>
                        <span class="text-muted">page: (<%= lock[:page] %>)</span>
                      <% elsif lock[:locktype] == "transactionid" %>
                        <span class="text-muted">transactionid: (<%= lock[:tid] %>)</span>
                      <% elsif lock[:locktype] == "virtualxid" %>
                        <span class="text-muted">transactionid: (<%= lock[:vtid] %>)</span>
                      <% else %>
                        <span class="text-muted">(<%= lock[:locktype] %>)</span>
                      <% end %>
                    </td>
                    <td><%= lock[:mode] %></td>
                    <td>
                      <% if lock[:granted] %>
                        <span>Granted</span>
                      <% else %>
                        <span class="text-warning">(waiting)</span>
                      <% end %>
                    </td>
                  </tr>
                <% end %>
              </table>
            </div>
          <% end %>
        </td>
      </tr>
    <% end %>
  </tbody>
</table>

<script>
  highlightQueries();
</script>
